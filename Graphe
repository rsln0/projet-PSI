using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

namespace LivInParisApp
{
    public class Graphe<T>
    {
        private Dictionary<int, double> _tempsChangementMapping = new Dictionary<int, double>();

        public List<Noeud<T>> Noeuds { get; private set; }
        public bool EstOriente { get; private set; }

        public Graphe(bool estOriente = true)
        {
            Noeuds = new List<Noeud<T>>();
            EstOriente = estOriente;
        }

        public void AjouterNoeud(Noeud<T> noeud)
        {
            if (!Noeuds.Contains(noeud))
            {
                Noeuds.Add(noeud);
            }
        }
        public void AfficherGraphe()
        {
            Console.WriteLine("Contenu du graphe :");

            // Trier les nœuds par ID pour l'affichage
            var noeudsTriesParId = Noeuds.OrderBy(n => n.LigneMetro).ToList();

            foreach (var noeud in noeudsTriesParId)
            {
                Console.WriteLine($"Station: {noeud.Nom} (Ligne: {noeud.LigneMetro})");

                // Trier les voisins par ID également
                var voisinsTriesParId = noeud.Voisins.OrderBy(v => v.Key.LigneMetro).ToList();

                foreach (var voisin in voisinsTriesParId)
                {
                    string typeConnection = noeud.LigneMetro == voisin.Key.LigneMetro ? "Même ligne" : "Correspondance";
                    Console.WriteLine($"  -> Voisin: {voisin.Key.Nom} (Ligne: {voisin.Key.LigneMetro}), Temps: {voisin.Value} min, Type: {typeConnection}");
                }

                Console.WriteLine(); // Ligne vide pour améliorer la lisibilité
            }
        }

        public void ChargerDonneesCSV(string cheminFichier)
        {
            try
            {
                string[] lignes = System.IO.File.ReadAllLines(cheminFichier);
                bool premiereLigne = true;
                Dictionary<int, Noeud<T>> stationsParId = new Dictionary<int, Noeud<T>>();
                _tempsChangementMapping.Clear();

                // Première passe : créer tous les nœuds
                foreach (string ligne in lignes)
                {
                    if (premiereLigne)
                    {
                        premiereLigne = false;
                        continue; // Ignorer l'en-tête
                    }

                    string[] donnees = ligne.Split(';');
                    if (donnees.Length >= 6)
                    {
                        int idStation = int.Parse(donnees[0]);
                        string nomStation = donnees[1];
                        string ligneMetro = donnees[2].Trim();
                        double tempsChangement = double.Parse(donnees[5], CultureInfo.InvariantCulture);

                        // Créer le nœud s'il n'existe pas déjà
                        if (!stationsParId.ContainsKey(idStation))
                        {
                            Noeud<T> nouveauNoeud = new Noeud<T>(default(T), nomStation, 0, 0, ligneMetro);
                            stationsParId.Add(idStation, nouveauNoeud);
                            AjouterNoeud(nouveauNoeud);
                            _tempsChangementMapping[idStation] = tempsChangement;
                        }
                    }
                }

                // Deuxième passe : créer les connexions entre les stations
                premiereLigne = true;
                foreach (string ligne in lignes)
                {
                    if (premiereLigne)
                    {
                        premiereLigne = false;
                        continue;
                    }

                    string[] donnees = ligne.Split(';');
                    if (donnees.Length >= 6)
                    {
                        int idStation = int.Parse(donnees[0]);
                        int? idPrecedent = string.IsNullOrEmpty(donnees[2]) ? (int?)null : int.Parse(donnees[2]);
                        int? idSuivant = string.IsNullOrEmpty(donnees[3]) ? (int?)null : int.Parse(donnees[3]);
                        double tempsEntreStations = double.Parse(donnees[4], CultureInfo.InvariantCulture);

                        Noeud<T> stationActuelle = stationsParId[idStation];

                        // Ajouter le lien vers la station précédente si elle existe
                        if (idPrecedent.HasValue && tempsEntreStations > 0)
                        {
                            if (stationsParId.ContainsKey(idPrecedent.Value))
                            {
                                Noeud<T> stationPrecedente = stationsParId[idPrecedent.Value];
                                AjouterLien(stationActuelle, stationPrecedente, tempsEntreStations);
                            }
                        }

                        // Ajouter le lien vers la station suivante si elle existe
                        if (idSuivant.HasValue && tempsEntreStations > 0)
                        {
                            if (stationsParId.ContainsKey(idSuivant.Value))
                            {
                                Noeud<T> stationSuivante = stationsParId[idSuivant.Value];
                                AjouterLien(stationActuelle, stationSuivante, tempsEntreStations);
                            }
                        }
                    }
                }

                // Troisième étape : générer les correspondances entre stations de même nom
                Console.WriteLine("Création des correspondances entre stations...");
                ChargerCorrespondances();

                Console.WriteLine($"Chargement terminé. {stationsParId.Count} stations créées avec leurs connexions.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors du chargement des données CSV: {ex.Message}");
                Console.WriteLine(ex.StackTrace);
            }
        }


        public void ChargerCorrespondances()
        {
            try
            {
                // Regrouper les stations par nom
                Dictionary<string, List<Noeud<T>>> stationsParNom = new Dictionary<string, List<Noeud<T>>>();

                foreach (Noeud<T> noeud in Noeuds)
                {
                    if (string.IsNullOrWhiteSpace(noeud.Nom))
                        continue;

                    if (!stationsParNom.ContainsKey(noeud.Nom))
                    {
                        stationsParNom[noeud.Nom] = new List<Noeud<T>>();
                    }
                    stationsParNom[noeud.Nom].Add(noeud);
                }

                int correspondancesCreees = 0;
                foreach (var nomStation in stationsParNom.Keys)
                {
                    var stationsMemeNom = stationsParNom[nomStation];

                    if (stationsMemeNom.Count > 1)
                    {
                        Console.WriteLine($"Création de correspondances pour la station : {nomStation} ({stationsMemeNom.Count} lignes)");

                        for (int i = 0; i < stationsMemeNom.Count; i++)
                        {
                            for (int j = i + 1; j < stationsMemeNom.Count; j++)
                            {
                                Noeud<T> station1 = stationsMemeNom[i];
                                Noeud<T> station2 = stationsMemeNom[j];

                                double tempsChangement1 = 3.0;
                                double tempsChangement2 = 3.0;

                                if (!string.IsNullOrWhiteSpace(station1.LigneMetro) &&
                                    int.TryParse(station1.LigneMetro, out int value1) &&
                                    _tempsChangementMapping.TryGetValue(value1, out double tc1))
                                {
                                    tempsChangement1 = tc1;
                                }
                                // Sinon, on garde la valeur par défaut 3.0

                                if (!string.IsNullOrWhiteSpace(station2.LigneMetro) &&
                                    int.TryParse(station2.LigneMetro, out int value2) &&
                                    _tempsChangementMapping.TryGetValue(value2, out double tc2))
                                {
                                    tempsChangement2 = tc2;
                                }
                                // Sinon, on garde la valeur par défaut 3.0

                                double tempsCorrespondance = (tempsChangement1 + tempsChangement2) / 2.0;
                                if (tempsCorrespondance <= 0)
                                    tempsCorrespondance = 3.0;

                                AjouterLien(station1, station2, tempsCorrespondance);
                                AjouterLien(station2, station1, tempsCorrespondance);

                                correspondancesCreees++;

                                Console.WriteLine($"  Correspondance: {station1.Nom} (Ligne: {station1.LigneMetro}) <--> {station2.Nom} (Ligne: {station2.LigneMetro}), Temps: {tempsCorrespondance} min");
                            }
                        }
                    }
                }

                Console.WriteLine($"Total des correspondances créées: {correspondancesCreees}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors du chargement des correspondances: {ex.Message}");
                Console.WriteLine(ex.StackTrace);
            }
        }

        public void AjouterLien(Noeud<T> source, Noeud<T> destination, double poids)
        {
            // Vérifier que les deux noeuds existent dans le graphe
            if (!Noeuds.Contains(source))
                Noeuds.Add(source);

            if (!Noeuds.Contains(destination))
                Noeuds.Add(destination);

            // Ajouter le lien
            source.AjouterVoisin(destination, poids);

            // Si le graphe n'est pas orienté, ajouter également le lien inverse
            if (!EstOriente)
            {
                destination.AjouterVoisin(source, poids);
            }
        }
        

        // Recherche du plus court chemin avec l'algorithme de Dijkstra
        public List<Noeud<T>> Dijkstra(Noeud<T> source, Noeud<T> destination)
        {
            if (!Noeuds.Contains(source) || !Noeuds.Contains(destination))
                return new List<Noeud<T>>();

            Dictionary<Noeud<T>, double> distances = new Dictionary<Noeud<T>, double>();
            Dictionary<Noeud<T>, Noeud<T>> predecesseurs = new Dictionary<Noeud<T>, Noeud<T>>();
            List<Noeud<T>> nonVisites = new List<Noeud<T>>();

            foreach (Noeud<T> noeud in Noeuds)
            {
                distances[noeud] = noeud.Equals(source) ? 0 : double.MaxValue;
                nonVisites.Add(noeud);
            }

            while (nonVisites.Count > 0)
            {
                Noeud<T> noeudActuel = null;
                double minDistance = double.MaxValue;

                foreach (Noeud<T> noeud in nonVisites)
                {
                    if (distances[noeud] < minDistance)
                    {
                        minDistance = distances[noeud];
                        noeudActuel = noeud;
                    }
                }

                if (noeudActuel == null || noeudActuel.Equals(destination))
                    break;

                nonVisites.Remove(noeudActuel);

                foreach (var paire in noeudActuel.Voisins)
                {
                    Noeud<T> voisin = paire.Key;
                    double poids = paire.Value;
                    double distance = distances[noeudActuel] + poids;

                    if (distance < distances[voisin])
                    {
                        distances[voisin] = distance;
                        predecesseurs[voisin] = noeudActuel;
                    }
                }
            }

            List<Noeud<T>> chemin = new List<Noeud<T>>();
            Noeud<T> noeudCourant = destination;

            if (predecesseurs.ContainsKey(destination))
            {
                while (noeudCourant != null)
                {
                    chemin.Insert(0, noeudCourant);
                    if (noeudCourant.Equals(source))
                        break;
                    noeudCourant = predecesseurs.ContainsKey(noeudCourant) ? predecesseurs[noeudCourant] : null;
                }
            }

            return chemin;
        }


        // Recherche du plus court chemin avec l'algorithme de Bellman-Ford
        public List<Noeud<T>> BellmanFord(Noeud<T> source, Noeud<T> destination)
        {
            if (!Noeuds.Contains(source) || !Noeuds.Contains(destination))
                return new List<Noeud<T>>();

            Dictionary<Noeud<T>, double> distances = new Dictionary<Noeud<T>, double>();
            Dictionary<Noeud<T>, Noeud<T>> predecesseurs = new Dictionary<Noeud<T>, Noeud<T>>();

            foreach (Noeud<T> noeud in Noeuds)
            {
                distances[noeud] = noeud.Equals(source) ? 0 : double.MaxValue;
            }

            for (int i = 0; i < Noeuds.Count - 1; i++)
            {
                foreach (Noeud<T> noeud in Noeuds)
                {
                    foreach (var paire in noeud.Voisins)
                    {
                        Noeud<T> voisin = paire.Key;
                        double poids = paire.Value;

                        if (distances[noeud] != double.MaxValue && distances[noeud] + poids < distances[voisin])
                        {
                            distances[voisin] = distances[noeud] + poids;
                            predecesseurs[voisin] = noeud;
                        }
                    }
                }
            }

            foreach (Noeud<T> noeud in Noeuds)
            {
                foreach (var paire in noeud.Voisins)
                {
                    Noeud<T> voisin = paire.Key;
                    double poids = paire.Value;

                    if (distances[noeud] != double.MaxValue && distances[noeud] + poids < distances[voisin])
                    {
                        Console.WriteLine("Attention: Le graphe contient un cycle de poids négatif.");
                        return new List<Noeud<T>>();
                    }
                }
            }

            List<Noeud<T>> chemin = new List<Noeud<T>>();
            Noeud<T> noeudCourant = destination;

            if (predecesseurs.ContainsKey(destination))
            {
                while (noeudCourant != null)
                {
                    chemin.Insert(0, noeudCourant);
                    if (noeudCourant.Equals(source))
                        break;
                    noeudCourant = predecesseurs.ContainsKey(noeudCourant) ? predecesseurs[noeudCourant] : null;
                }
            }

            return chemin;
        }

        // Recherche du plus court chemin avec l'algorithme de Floyd-Warshall
        public List<Noeud<T>> FloydWarshall(Noeud<T> source, Noeud<T> destination)
        {
            if (!Noeuds.Contains(source) || !Noeuds.Contains(destination))
                return new List<Noeud<T>>();

            int n = Noeuds.Count;
            double[,] dist = new double[n, n];
            int[,] next = new int[n, n];

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    dist[i, j] = double.MaxValue;
                    next[i, j] = -1;
                }
            }

            for (int i = 0; i < n; i++)
            {
                dist[i, i] = 0;
                foreach (var paire in Noeuds[i].Voisins)
                {
                    int j = Noeuds.IndexOf(paire.Key);
                    if (j != -1)
                    {
                        dist[i, j] = paire.Value;
                        next[i, j] = j;
                    }
                }
            }

            for (int k = 0; k < n; k++)
            {
                for (int i = 0; i < n; i++)
                {
                    for (int j = 0; j < n; j++)
                    {
                        if (dist[i, k] != double.MaxValue && dist[k, j] != double.MaxValue)
                        {
                            if (dist[i, j] > dist[i, k] + dist[k, j])
                            {
                                dist[i, j] = dist[i, k] + dist[k, j];
                                next[i, j] = next[i, k];
                            }
                        }
                    }
                }
            }

            List<Noeud<T>> chemin = new List<Noeud<T>>();
            int sourceIndex = Noeuds.IndexOf(source);
            int destIndex = Noeuds.IndexOf(destination);

            if (next[sourceIndex, destIndex] == -1)
                return chemin;

            chemin.Add(source);
            while (sourceIndex != destIndex)
            {
                sourceIndex = next[sourceIndex, destIndex];
                if (sourceIndex == -1)
                    return new List<Noeud<T>>();
                chemin.Add(Noeuds[sourceIndex]);
            }

            return chemin;
        }

        // Comparer les résultats des 3 algorithmes
        public void ComparerAlgorithmes(Noeud<T> source, Noeud<T> destination)
        {
            Console.WriteLine($"Comparaison des algorithmes pour le trajet de {source} à {destination}");

            var startDijkstra = DateTime.Now;
            var cheminDijkstra = Dijkstra(source, destination);
            var tempsDijkstra = (DateTime.Now - startDijkstra).TotalMilliseconds;

            var startBellman = DateTime.Now;
            var cheminBellman = BellmanFord(source, destination);
            var tempsBellman = (DateTime.Now - startBellman).TotalMilliseconds;

            var startFloyd = DateTime.Now;
            var cheminFloyd = FloydWarshall(source, destination);
            var tempsFloyd = (DateTime.Now - startFloyd).TotalMilliseconds;

            Console.WriteLine("\nRésultats Dijkstra:");
            AfficherChemin(cheminDijkstra);
            Console.WriteLine($"Temps d'exécution: {tempsDijkstra} ms");

            Console.WriteLine("\nRésultats Bellman-Ford:");
            AfficherChemin(cheminBellman);
            Console.WriteLine($"Temps d'exécution: {tempsBellman} ms");

            Console.WriteLine("\nRésultats Floyd-Warshall:");
            AfficherChemin(cheminFloyd);
            Console.WriteLine($"Temps d'exécution: {tempsFloyd} ms");

            Console.WriteLine("\nComparaison des performances:");
            Console.WriteLine($"Dijkstra: {tempsDijkstra} ms - Complexité O(E + V log V)");
            Console.WriteLine($"Bellman-Ford: {tempsBellman} ms - Complexité O(V*E)");
            Console.WriteLine($"Floyd-Warshall: {tempsFloyd} ms - Complexité O(V^3)");

            Console.WriteLine("\nConculsion:");
            Console.WriteLine("- Dijkstra est généralement le plus rapide pour les graphes sans poids négatifs.");
            Console.WriteLine("- Bellman-Ford peut gérer les poids négatifs mais est plus lent que Dijkstra.");
            Console.WriteLine("- Floyd-Warshall calcule tous les chemins les plus courts entre toutes les paires de sommets, ce qui le rend utile pour des requêtes multiples mais plus lent pour une seule requête.");
        }

        private void AfficherChemin(List<Noeud<T>> chemin)
        {
            if (chemin.Count == 0)
            {
                Console.WriteLine("Aucun chemin trouvé.");
                return;
            }

            double tempsTotal = 0;
            Console.WriteLine($"Chemin trouvé ({chemin.Count} stations):");

            for (int i = 0; i < chemin.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {chemin[i]}");
                if (i < chemin.Count - 1)
                {
                    double tempsTroncon = chemin[i].Voisins[chemin[i + 1]];
                    tempsTotal += tempsTroncon;
                    if (chemin[i].LigneMetro != chemin[i + 1].LigneMetro)
                    {
                        Console.WriteLine($"   Correspondance: Ligne {chemin[i].LigneMetro} → Ligne {chemin[i + 1].LigneMetro} ({tempsTroncon} min)");
                    }
                    else
                    {
                        Console.WriteLine($"   → ({tempsTroncon} min)");
                    }
                }
            }

            Console.WriteLine($"Temps total estimé: {tempsTotal} minutes");
        }
    }
}
