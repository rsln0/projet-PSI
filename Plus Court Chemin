using System;
using System.Collections.Generic;
using System.Linq;

namespace LivInParisApp
{
    public class AlgorithmesCheminPlusCourt<T>
    {
        private Graphe<T> graphe;

        public AlgorithmesCheminPlusCourt(Graphe<T> graphe)
        {
            this.graphe = graphe;
        }

        public (Dictionary<string, double> distances, Dictionary<string, string> predecesseurs) Dijkstra(string idDepart)
        {
            Dictionary<string, double> distances = new Dictionary<string, double>();
            Dictionary<string, string> predecesseurs = new Dictionary<string, string>();
            HashSet<string> nonVisites = new HashSet<string>();

            // Initialisation
            foreach (var noeud in graphe.Noeuds.Values)
            {
                distances[noeud.Id] = double.MaxValue;
                predecesseurs[noeud.Id] = null;
                nonVisites.Add(noeud.Id);
            }
            distances[idDepart] = 0;

            while (nonVisites.Count > 0)
            {
                // Trouver le noeud non visité avec la plus petite distance
                string u = nonVisites.OrderBy(id => distances[id]).First();

                // Si nous atteignons un noeud avec une distance infinie, tous les noeuds restants sont inaccessibles
                if (distances[u] == double.MaxValue)
                    break;

                nonVisites.Remove(u);

                // Mettre à jour les distances pour tous les voisins
                foreach (var lien in graphe.Noeuds[u].Liens)
                {
                    string v = lien.Cible.Id;
                    double alt = distances[u] + lien.Poids;
                    if (alt < distances[v])
                    {
                        distances[v] = alt;
                        predecesseurs[v] = u;
                    }
                }
            }

            return (distances, predecesseurs);
        }

        public (Dictionary<string, double> distances, Dictionary<string, string> predecesseurs) BellmanFord(string idDepart)
        {
            Dictionary<string, double> distances = new Dictionary<string, double>();
            Dictionary<string, string> predecesseurs = new Dictionary<string, string>();

            // Initialisation
            foreach (var noeud in graphe.Noeuds.Values)
            {
                distances[noeud.Id] = double.MaxValue;
                predecesseurs[noeud.Id] = null;
            }
            distances[idDepart] = 0;

            // Relaxation des arêtes |V|-1 fois
            int nbrNoeuds = graphe.Noeuds.Count;
            for (int i = 1; i < nbrNoeuds; i++)
            {
                bool changement = false;
                foreach (var noeud in graphe.Noeuds.Values)
                {
                    foreach (var lien in noeud.Liens)
                    {
                        string u = noeud.Id;
                        string v = lien.Cible.Id;
                        double poids = lien.Poids;

                        if (distances[u] != double.MaxValue && distances[u] + poids < distances[v])
                        {
                            distances[v] = distances[u] + poids;
                            predecesseurs[v] = u;
                            changement = true;
                        }
                    }
                }
                
                // Si aucun changement à cette itération, nous pouvons arrêter
                if (!changement)
                    break;
            }

            // Vérification des cycles de poids négatif
            foreach (var noeud in graphe.Noeuds.Values)
            {
                foreach (var lien in noeud.Liens)
                {
                    string u = noeud.Id;
                    string v = lien.Cible.Id;
                    double poids = lien.Poids;

                    if (distances[u] != double.MaxValue && distances[u] + poids < distances[v])
                    {
                        throw new InvalidOperationException("Le graphe contient un cycle de poids négatif");
                    }
                }
            }

            return (distances, predecesseurs);
        }

        public Dictionary<string, Dictionary<string, double>> FloydWarshall()
        {
            List<string> sommets = graphe.Noeuds.Keys.ToList();
            Dictionary<string, Dictionary<string, double>> distances = new Dictionary<string, Dictionary<string, double>>();
            Dictionary<string, Dictionary<string, string>> predecesseurs = new Dictionary<string, Dictionary<string, string>>();

            // Initialisation
            foreach (var u in sommets)
            {
                distances[u] = new Dictionary<string, double>();
                predecesseurs[u] = new Dictionary<string, string>();
                
                foreach (var v in sommets)
                {
                    if (u == v)
                    {
                        distances[u][v] = 0;
                    }
                    else
                    {
                        distances[u][v] = double.MaxValue;
                    }
                    predecesseurs[u][v] = null;
                }
            }

            // Remplir les distances directes à partir des arêtes existantes
            foreach (var noeud in graphe.Noeuds.Values)
            {
                foreach (var lien in noeud.Liens)
                {
                    string u = noeud.Id;
                    string v = lien.Cible.Id;
                    distances[u][v] = lien.Poids;
                    predecesseurs[u][v] = u;
                }
            }

            // Algorithme principal
            foreach (var k in sommets)
            {
                foreach (var i in sommets)
                {
                    foreach (var j in sommets)
                    {
                        if (distances[i][k] != double.MaxValue && distances[k][j] != double.MaxValue)
                        {
                            if (distances[i][j] > distances[i][k] + distances[k][j])
                            {
                                distances[i][j] = distances[i][k] + distances[k][j];
                                predecesseurs[i][j] = predecesseurs[k][j];
                            }
                        }
                    }
                }
            }

            // Vérifier les cycles négatifs
            foreach (var v in sommets)
            {
                if (distances[v][v] < 0)
                {
                    throw new InvalidOperationException("Le graphe contient un cycle de poids négatif");
                }
            }

            return distances;
        }

        public List<string> ReconstruireChemin(Dictionary<string, string> predecesseurs, string depart, string arrivee)
        {
            List<string> chemin = new List<string>();
            string courant = arrivee;

            while (courant != null)
            {
                chemin.Insert(0, courant);
                if (courant == depart)
                    break;
                courant = predecesseurs[courant];
            }

            return chemin;
        }

        public (double distance, List<string> chemin) TrouverCheminPlusCourt(string depart, string arrivee, string algorithme = "dijkstra")
        {
            switch (algorithme.ToLower())
            {
                case "dijkstra":
                    var resultDijkstra = Dijkstra(depart);
                    var cheminDijkstra = ReconstruireChemin(resultDijkstra.predecesseurs, depart, arrivee);
                    return (resultDijkstra.distances[arrivee], cheminDijkstra);

                case "bellman-ford":
                    var resultBellmanFord = BellmanFord(depart);
                    var cheminBellmanFord = ReconstruireChemin(resultBellmanFord.predecesseurs, depart, arrivee);
                    return (resultBellmanFord.distances[arrivee], cheminBellmanFord);

                case "floyd-warshall":
                    var resultFloyd = FloydWarshall();
                    double distance = resultFloyd[depart][arrivee];
                    // Pour Floyd-Warshall, nous n'avons pas implémenté la reconstruction du chemin
                    // car cela nécessiterait de stocker les prédécesseurs différemment
                    List<string> cheminFloyd = new List<string> { depart, arrivee };
                    return (distance, cheminFloyd);

                default:
                    throw new ArgumentException("Algorithme non supporté");
            }
        }
    }
}
