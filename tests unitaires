using System;
using System.Collections.Generic;
using System.IO;
using Xunit;
using GraphEtudiantSimple;

namespace TestProject1
{
    public class GrapheTests
    {
        [Fact]
        public void AjouterSommet_AjouteUnSommet()
        {
            var graphe = new Graphe();
            graphe.AjouterSommet("1");
            Assert.True(graphe.sommets.ContainsKey("1"));
        }

        [Fact]
        public void AjouterConnexion_AjouteUneConnexion()
        {
            var graphe = new Graphe();
            graphe.AjouterSommet("1");
            graphe.AjouterSommet("2");
            graphe.AjouterConnexion("1", "2");

            Assert.Contains(graphe.sommets["1"].connexions, c => c.cible.nom == "2");
            Assert.Contains(graphe.sommets["2"].connexions, c => c.cible.nom == "1");
        }

        [Fact]
        public void AjouterConnexion_ErreurSiSommetInexistant()
        {
            var graphe = new Graphe();
            graphe.AjouterSommet("1");

            /// L'appel ne doit pas lever d'exception même si le sommet 3 n'existe pas.
            var ex = Record.Exception(() => graphe.AjouterConnexion("1", "3"));
            Assert.Null(ex);
        }

        [Fact]
        public void AfficherListe_AfficheCorrectement()
        {
            var graphe = new Graphe();
            graphe.AjouterSommet("1");
            graphe.AjouterSommet("2");
            graphe.AjouterSommet("3");
            graphe.AjouterConnexion("1", "2");
            graphe.AjouterConnexion("2", "3");

            var output = new StringWriter();
            Console.SetOut(output);
            graphe.AfficherListe();

            var expectedOutput = "Liste d'adjacence :\n1 -> 2 \n2 -> 1 3 \n3 -> 2 \n";
            var actualOutput = output.ToString().Replace("\r\n", "\n");
            Assert.Equal(expectedOutput, actualOutput);
        }

        [Fact]
        public void AfficherMatrice_AfficheCorrectement()
        {
            var graphe = new Graphe();
            graphe.AjouterSommet("1");
            graphe.AjouterSommet("2");
            graphe.AjouterSommet("3");
            graphe.AjouterConnexion("1", "2");
            graphe.AjouterConnexion("2", "3");

            var output = new StringWriter();
            Console.SetOut(output);
            graphe.AfficherMatrice();

            var actualOutput = output.ToString().Replace("\r\n", "\n");
            Assert.Contains("Matrice d'adjacence :", actualOutput);
            Assert.Contains("1", actualOutput);
            Assert.Contains("2", actualOutput);
            Assert.Contains("3", actualOutput);
        }

        [Fact]
        public void ParcourLargeur_ParcourtCorrectement()
        {
            var graphe = new Graphe();
            graphe.AjouterSommet("1");
            graphe.AjouterSommet("2");
            graphe.AjouterSommet("3");
            graphe.AjouterConnexion("1", "2");
            graphe.AjouterConnexion("2", "3");

            var output = new StringWriter();
            Console.SetOut(output);
            graphe.ParcourLargeur("1");

            var expectedOutput = "Parcours en largeur :\n1 2 3 \n";
            var actualOutput = output.ToString().Replace("\r\n", "\n");
            Assert.Equal(expectedOutput, actualOutput);
        }

        [Fact]
        public void ParcourProfondeur_ParcourtCorrectement()
        {
            var graphe = new Graphe();
            graphe.AjouterSommet("1");
            graphe.AjouterSommet("2");
            graphe.AjouterSommet("3");
            graphe.AjouterConnexion("1", "2");
            graphe.AjouterConnexion("2", "3");

            var output = new StringWriter();
            Console.SetOut(output);
            graphe.ParcourProfondeur("1");

            var expectedOutput = "Parcours en profondeur :\n1 2 3 \n";
            var actualOutput = output.ToString().Replace("\r\n", "\n");
            Assert.Equal(expectedOutput, actualOutput);
        }

        [Fact]
        public void EstConnexe_QuandGrapheConnexe_RetourneTrue()
        {
            /// Création d'un graphe connexe : 1 - 2 - 3
            var graphe = new Graphe();
            graphe.AjouterSommet("1");
            graphe.AjouterSommet("2");
            graphe.AjouterSommet("3");
            graphe.AjouterConnexion("1", "2");
            graphe.AjouterConnexion("2", "3");

            Assert.True(graphe.EstConnexe());
        }

        [Fact]
        public void EstConnexe_QuandGrapheNonConnexe_RetourneFalse()
        {
            /// Création d'un graphe non connexe : 1 - 2, et 3 isolé
            var graphe = new Graphe();
            graphe.AjouterSommet("1");
            graphe.AjouterSommet("2");
            graphe.AjouterSommet("3");
            graphe.AjouterConnexion("1", "2");

            Assert.False(graphe.EstConnexe());
        }

        [Fact]
        public void ContientCircuit_QuandCircuitExiste_RetourneTrue()
        {
            /// Création d'un graphe avec un circuit : 1 - 2 - 3 - 1
            var graphe = new Graphe();
            graphe.AjouterSommet("1");
            graphe.AjouterSommet("2");
            graphe.AjouterSommet("3");
            graphe.AjouterConnexion("1", "2");
            graphe.AjouterConnexion("2", "3");
            graphe.AjouterConnexion("3", "1");

            Assert.True(graphe.ContientCircuit());
        }

        [Fact]
        public void ContientCircuit_QuandAucunCircuit_RetourneFalse()
        {
            /// Création d'un graphe sans circuit : 1, 2, 3
            var graphe = new Graphe();
            graphe.AjouterSommet("1");
            graphe.AjouterSommet("2");
            graphe.AjouterSommet("3");
            graphe.AjouterConnexion("1", "2");
            graphe.AjouterConnexion("2", "3");

            Assert.False(graphe.ContientCircuit());
        }
    }
}
