using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using MySql.Data.MySqlClient;
using System.Text.Json;
using System.Xml.Serialization;

namespace LivInParisApp
{
    class Program
    {
        private static string connectionString = "Server=localhost;Database=LivInParis;Uid=root;Pwd=zigwy2306;";
        private static MySqlConnection connection;

        static void Main(string[] args)
        {
            try
            {
                connection = new MySqlConnection(connectionString);
                connection.Open();
                Console.WriteLine("Connexion réussie à la base de données LivInParis");

                // Menu principal
                bool exit = false;
                while (!exit)
                {
                    Console.Clear();
                    Console.WriteLine("===== Liv'In Paris - Système de partage de repas =====");
                    Console.WriteLine("1. Module Client");
                    Console.WriteLine("2. Module Cuisinier");
                    Console.WriteLine("3. Module Commande");
                    Console.WriteLine("4. Module Trajet");
                    Console.WriteLine("5. Quitter");
                    Console.Write("Votre choix : ");

                    string choice = Console.ReadLine();
                    Console.WriteLine();

                    switch (choice)
                    {
                        case "1":
                            ModuleClient();
                            break;
                        case "2":
                            ModuleCuisinier();
                            break;
                        case "3":
                            ModuleCommande();
                            break;
                        case "4":
                            ModuleTrajet();
                            break;
                        case "6":
                            exit = true;
                            break;
                        default:
                            Console.WriteLine("Option invalide. Veuillez réessayer.");
                            break;
                    }
                }

                connection.Close();
                Console.WriteLine("Au revoir !");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur : {ex.Message}");
            }
        }

        #region Module Client
        private static void ModuleClient()
        {
            bool retour = false;
            while (!retour)
            {
                Console.Clear();
                Console.WriteLine("===== MODULE CLIENT =====");
                Console.WriteLine("1. Ajouter un client");
                Console.WriteLine("2. Modifier un client");
                Console.WriteLine("3. Supprimer un client");
                Console.WriteLine("4. Afficher tous les clients");
                Console.WriteLine("5. Afficher les clients par rue");
                Console.WriteLine("6. Retour au menu principal");
                Console.Write("Votre choix : ");

                string choice = Console.ReadLine();
                Console.WriteLine();

                switch (choice)
                {
                    case "1":
                        AjouterClient();
                        break;
                    case "2":
                        ModifierClient();
                        break;
                    case "3":
                        SupprimerClient();
                        break;
                    case "4":
                        AfficherClientsParOrdreAlphabetique();
                        break;
                    case "5":
                        AfficherClientsParRue();
                        break;
                    case "6":
                        retour = true;
                        break;
                    default:
                        Console.WriteLine("Option invalide. Veuillez réessayer.");
                        break;
                }

                if (!retour)
                {
                    Console.WriteLine("\nAppuyez sur une touche pour continuer...");
                    Console.ReadKey();
                }
            }
        }

        private static void AjouterClient()
        {
            Console.WriteLine("=== Ajout d'un nouveau client ===");

            Console.Write("Nom : ");
            string nom = Console.ReadLine();

            Console.Write("Prénom : ");
            string prenom = Console.ReadLine();

            Console.Write("Adresse : ");
            string adresse = Console.ReadLine();

            Console.Write("Téléphone : ");
            string telephone = Console.ReadLine();

            Console.Write("Email : ");
            string email = Console.ReadLine();

            try
            {
                string query = "INSERT INTO Client (nom, prenom, adresse, telephone, email) VALUES (@nom, @prenom, @adresse, @telephone, @email)";
                MySqlCommand cmd = new MySqlCommand(query, connection);
                cmd.Parameters.AddWithValue("@nom", nom);
                cmd.Parameters.AddWithValue("@prenom", prenom);
                cmd.Parameters.AddWithValue("@adresse", adresse);
                cmd.Parameters.AddWithValue("@telephone", telephone);
                cmd.Parameters.AddWithValue("@email", email);

                int rowsAffected = cmd.ExecuteNonQuery();
                if (rowsAffected > 0)
                {
                    Console.WriteLine("Client ajouté avec succès !");
                }
                else
                {
                    Console.WriteLine("Erreur lors de l'ajout du client.");
                }
            }
            catch (MySqlException ex)
            {
                if (ex.Number == 1062) // Duplicate entry for email
                {
                    Console.WriteLine("Erreur: Cette adresse email est déjà utilisée.");
                }
                else
                {
                    Console.WriteLine($"Erreur MySQL: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur: {ex.Message}");
            }
        }

        private static void ModifierClient()
        {
            Console.WriteLine("=== Modification d'un client ===");

            Console.Write("Entrez l'ID du client à modifier : ");
            if (!int.TryParse(Console.ReadLine(), out int idClient))
            {
                Console.WriteLine("ID invalide.");
                return;
            }

            try
            {
                // Vérifier si le client existe
                string checkQuery = "SELECT * FROM Client WHERE id_client = @id";
                MySqlCommand checkCmd = new MySqlCommand(checkQuery, connection);
                checkCmd.Parameters.AddWithValue("@id", idClient);

                using (MySqlDataReader reader = checkCmd.ExecuteReader())
                {
                    if (!reader.Read())
                    {
                        Console.WriteLine("Client non trouvé.");
                        return;
                    }

                    Console.WriteLine($"Modification du client: {reader["prenom"]} {reader["nom"]}");
                }

                Console.WriteLine("Entrez les nouvelles informations (laissez vide pour conserver la valeur actuelle):");

                // Récupérer les valeurs actuelles
                string currentQuery = "SELECT * FROM Client WHERE id_client = @id";
                MySqlCommand currentCmd = new MySqlCommand(currentQuery, connection);
                currentCmd.Parameters.AddWithValue("@id", idClient);

                string currentNom = "", currentPrenom = "", currentAdresse = "", currentTelephone = "", currentEmail = "";

                using (MySqlDataReader reader = currentCmd.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        currentNom = reader["nom"].ToString();
                        currentPrenom = reader["prenom"].ToString();
                        currentAdresse = reader["adresse"].ToString();
                        currentTelephone = reader["telephone"].ToString();
                        currentEmail = reader["email"].ToString();
                    }
                }

                Console.Write($"Nom [{currentNom}] : ");
                string nom = Console.ReadLine();
                nom = string.IsNullOrWhiteSpace(nom) ? currentNom : nom;

                Console.Write($"Prénom [{currentPrenom}] : ");
                string prenom = Console.ReadLine();
                prenom = string.IsNullOrWhiteSpace(prenom) ? currentPrenom : prenom;

                Console.Write($"Adresse [{currentAdresse}] : ");
                string adresse = Console.ReadLine();
                adresse = string.IsNullOrWhiteSpace(adresse) ? currentAdresse : adresse;

                Console.Write($"Téléphone [{currentTelephone}] : ");
                string telephone = Console.ReadLine();
                telephone = string.IsNullOrWhiteSpace(telephone) ? currentTelephone : telephone;

                Console.Write($"Email [{currentEmail}] : ");
                string email = Console.ReadLine();
                email = string.IsNullOrWhiteSpace(email) ? currentEmail : email;

                string updateQuery = "UPDATE Client SET nom = @nom, prenom = @prenom, adresse = @adresse, telephone = @telephone, email = @email WHERE id_client = @id";
                MySqlCommand updateCmd = new MySqlCommand(updateQuery, connection);
                updateCmd.Parameters.AddWithValue("@nom", nom);
                updateCmd.Parameters.AddWithValue("@prenom", prenom);
                updateCmd.Parameters.AddWithValue("@adresse", adresse);
                updateCmd.Parameters.AddWithValue("@telephone", telephone);
                updateCmd.Parameters.AddWithValue("@email", email);
                updateCmd.Parameters.AddWithValue("@id", idClient);

                int rowsAffected = updateCmd.ExecuteNonQuery();
                if (rowsAffected > 0)
                {
                    Console.WriteLine("Client modifié avec succès !");
                }
                else
                {
                    Console.WriteLine("Aucune modification n'a été effectuée.");
                }
            }
            catch (MySqlException ex)
            {
                if (ex.Number == 1062) // Duplicate entry for email
                {
                    Console.WriteLine("Erreur: Cette adresse email est déjà utilisée.");
                }
                else
                {
                    Console.WriteLine($"Erreur MySQL: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur: {ex.Message}");
            }
        }

        private static void SupprimerClient()
        {
            Console.WriteLine("=== Suppression d'un client ===");

            Console.Write("Entrez l'ID du client à supprimer : ");
            if (!int.TryParse(Console.ReadLine(), out int idClient))
            {
                Console.WriteLine("ID invalide.");
                return;
            }

            try
            {
                // Vérifier si le client existe
                string checkQuery = "SELECT * FROM Client WHERE id_client = @id";
                MySqlCommand checkCmd = new MySqlCommand(checkQuery, connection);
                checkCmd.Parameters.AddWithValue("@id", idClient);

                using (MySqlDataReader reader = checkCmd.ExecuteReader())
                {
                    if (!reader.Read())
                    {
                        Console.WriteLine("Client non trouvé.");
                        return;
                    }

                    Console.WriteLine($"Vous êtes sur le point de supprimer le client: {reader["prenom"]} {reader["nom"]}");
                }

                Console.Write("Êtes-vous sûr ? (O/N) : ");
                string confirmation = Console.ReadLine().ToUpper();

                if (confirmation != "O" && confirmation != "OUI")
                {
                    Console.WriteLine("Suppression annulée.");
                    return;
                }

                string deleteQuery = "DELETE FROM Client WHERE id_client = @id";
                MySqlCommand deleteCmd = new MySqlCommand(deleteQuery, connection);
                deleteCmd.Parameters.AddWithValue("@id", idClient);

                int rowsAffected = deleteCmd.ExecuteNonQuery();
                if (rowsAffected > 0)
                {
                    Console.WriteLine("Client supprimé avec succès !");
                }
                else
                {
                    Console.WriteLine("Aucun client n'a été supprimé.");
                }
            }
            catch (MySqlException ex)
            {
                if (ex.Number == 1451) // Foreign key constraint
                {
                    Console.WriteLine("Erreur: Ce client ne peut pas être supprimé car il est lié à des commandes.");
                }
                else
                {
                    Console.WriteLine($"Erreur MySQL: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur: {ex.Message}");
            }
        }

        private static void AfficherClientsParOrdreAlphabetique()
        {
            Console.WriteLine("=== Liste des clients par ordre alphabétique ===");

            try
            {
                string query = "SELECT id_client, nom, prenom, adresse, telephone, email FROM Client ORDER BY nom, prenom";
                MySqlCommand cmd = new MySqlCommand(query, connection);

                using (MySqlDataReader reader = cmd.ExecuteReader())
                {
                    if (!reader.HasRows)
                    {
                        Console.WriteLine("Aucun client trouvé.");
                        return;
                    }

                    Console.WriteLine("ID\tNom\t\tPrénom\t\tAdresse\t\t\tTéléphone\tEmail");
                    Console.WriteLine(new string('-', 100));

                    while (reader.Read())
                    {
                        Console.WriteLine($"{reader["id_client"]}\t{reader["nom"],-15}{reader["prenom"],-15}{reader["adresse"],-30}{reader["telephone"],-15}{reader["email"]}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur: {ex.Message}");
            }
        }

        private static void AfficherClientsParRue()
        {
            Console.WriteLine("=== Liste des clients par rue ===");

            try
            {
                string query = "SELECT id_client, nom, prenom, adresse, telephone, email FROM Client ORDER BY adresse";
                MySqlCommand cmd = new MySqlCommand(query, connection);

                using (MySqlDataReader reader = cmd.ExecuteReader())
                {
                    if (!reader.HasRows)
                    {
                        Console.WriteLine("Aucun client trouvé.");
                        return;
                    }

                    Console.WriteLine("ID\tNom\t\tPrénom\t\tAdresse\t\t\tTéléphone\tEmail");
                    Console.WriteLine(new string('-', 100));

                    while (reader.Read())
                    {
                        Console.WriteLine($"{reader["id_client"]}\t{reader["nom"],-15}{reader["prenom"],-15}{reader["adresse"],-30}{reader["telephone"],-15}{reader["email"]}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur: {ex.Message}");
            }
        }
        
        #endregion

        #region Module Cuisinier
        private static void ModuleCuisinier()
        {
            bool retour = false;
            while (!retour)
            {
                Console.Clear();
                Console.WriteLine("===== MODULE CUISINIER =====");
                Console.WriteLine("1. Ajouter un cuisinier");
                Console.WriteLine("2. Modifier un cuisinier");
                Console.WriteLine("3. Supprimer un cuisinier");
                Console.WriteLine("4. Retour au menu principal");
                Console.Write("Votre choix : ");

                string choice = Console.ReadLine();
                Console.WriteLine();

                switch (choice)
                {
                    case "1":
                        AjouterCuisinier();
                        break;
                    case "2":
                        ModifierCuisinier();
                        break;
                    case "3":
                        SupprimerCuisinier();
                        break;
                    case "4":
                        retour = true;
                        break;
                    default:
                        Console.WriteLine("Option invalide. Veuillez réessayer.");
                        break;
                }

                if (!retour)
                {
                    Console.WriteLine("\nAppuyez sur une touche pour continuer...");
                    Console.ReadKey();
                }
            }
        }

        private static void AjouterCuisinier()
        {
            Console.WriteLine("=== Ajout d'un nouveau cuisinier ===");

            Console.Write("Nom : ");
            string nom = Console.ReadLine();

            Console.Write("Prénom : ");
            string prenom = Console.ReadLine();

            Console.Write("Adresse : ");
            string adresse = Console.ReadLine();

            Console.Write("Téléphone : ");
            string telephone = Console.ReadLine();

            Console.Write("Email : ");
            string email = Console.ReadLine();

            try
            {
                string query = "INSERT INTO Cuisinier (nom, prenom, adresse, telephone, email) VALUES (@nom, @prenom, @adresse, @telephone, @email)";
                MySqlCommand cmd = new MySqlCommand(query, connection);
                cmd.Parameters.AddWithValue("@nom", nom);
                cmd.Parameters.AddWithValue("@prenom", prenom);
                cmd.Parameters.AddWithValue("@adresse", adresse);
                cmd.Parameters.AddWithValue("@telephone", telephone);
                cmd.Parameters.AddWithValue("@email", email);

                int rowsAffected = cmd.ExecuteNonQuery();
                if (rowsAffected > 0)
                {
                    Console.WriteLine("Cuisinier ajouté avec succès !");
                }
                else
                {
                    Console.WriteLine("Erreur lors de l'ajout du cuisinier.");
                }
            }
            catch (MySqlException ex)
            {
                if (ex.Number == 1062) // Duplicate entry for email
                {
                    Console.WriteLine("Erreur: Cette adresse email est déjà utilisée.");
                }
                else
                {
                    Console.WriteLine($"Erreur MySQL: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur: {ex.Message}");
            }
        }

        private static void ModifierCuisinier()
        {
            Console.WriteLine("=== Modification d'un cuisinier ===");

            Console.Write("Entrez l'ID du cuisinier à modifier : ");
            if (!int.TryParse(Console.ReadLine(), out int idCuisinier))
            {
                Console.WriteLine("ID invalide.");
                return;
            }

            try
            {
                // Vérifier si le cuisinier existe
                string checkQuery = "SELECT * FROM Cuisinier WHERE id_cuisinier = @id";
                MySqlCommand checkCmd = new MySqlCommand(checkQuery, connection);
                checkCmd.Parameters.AddWithValue("@id", idCuisinier);

                using (MySqlDataReader reader = checkCmd.ExecuteReader())
                {
                    if (!reader.Read())
                    {
                        Console.WriteLine("Cuisinier non trouvé.");
                        return;
                    }

                    Console.WriteLine($"Modification du cuisinier: {reader["prenom"]} {reader["nom"]}");
                }

                Console.WriteLine("Entrez les nouvelles informations (laissez vide pour conserver la valeur actuelle):");

                // Récupérer les valeurs actuelles
                string currentQuery = "SELECT * FROM Cuisinier WHERE id_cuisinier = @id";
                MySqlCommand currentCmd = new MySqlCommand(currentQuery, connection);
                currentCmd.Parameters.AddWithValue("@id", idCuisinier);

                string currentNom = "", currentPrenom = "", currentAdresse = "", currentTelephone = "", currentEmail = "";

                using (MySqlDataReader reader = currentCmd.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        currentNom = reader["nom"].ToString();
                        currentPrenom = reader["prenom"].ToString();
                        currentAdresse = reader["adresse"].ToString();
                        currentTelephone = reader["telephone"].ToString();
                        currentEmail = reader["email"].ToString();
                    }
                }

                Console.Write($"Nom [{currentNom}] : ");
                string nom = Console.ReadLine();
                nom = string.IsNullOrWhiteSpace(nom) ? currentNom : nom;

                Console.Write($"Prénom [{currentPrenom}] : ");
                string prenom = Console.ReadLine();
                prenom = string.IsNullOrWhiteSpace(prenom) ? currentPrenom : prenom;

                Console.Write($"Adresse [{currentAdresse}] : ");
                string adresse = Console.ReadLine();
                adresse = string.IsNullOrWhiteSpace(adresse) ? currentAdresse : adresse;

                Console.Write($"Téléphone [{currentTelephone}] : ");
                string telephone = Console.ReadLine();
                telephone = string.IsNullOrWhiteSpace(telephone) ? currentTelephone : telephone;

                Console.Write($"Email [{currentEmail}] : ");
                string email = Console.ReadLine();
                email = string.IsNullOrWhiteSpace(email) ? currentEmail : email;

                string updateQuery = "UPDATE Cuisinier SET nom = @nom, prenom = @prenom, adresse = @adresse, telephone = @telephone, email = @email WHERE id_cuisinier = @id";
                MySqlCommand updateCmd = new MySqlCommand(updateQuery, connection);
                updateCmd.Parameters.AddWithValue("@nom", nom);
                updateCmd.Parameters.AddWithValue("@prenom", prenom);
                updateCmd.Parameters.AddWithValue("@adresse", adresse);
                updateCmd.Parameters.AddWithValue("@telephone", telephone);
                updateCmd.Parameters.AddWithValue("@email", email);
                updateCmd.Parameters.AddWithValue("@id", idCuisinier);

                int rowsAffected = updateCmd.ExecuteNonQuery();
                if (rowsAffected > 0)
                {
                    Console.WriteLine("Cuisinier modifié avec succès !");
                }
                else
                {
                    Console.WriteLine("Aucune modification n'a été effectuée.");
                }
            }
            catch (MySqlException ex)
            {
                if (ex.Number == 1062) // Duplicate entry for email
                {
                    Console.WriteLine("Erreur: Cette adresse email est déjà utilisée.");
                }
                else
                {
                    Console.WriteLine($"Erreur MySQL: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur: {ex.Message}");
            }
        }

        private static void SupprimerCuisinier()
        {
            Console.WriteLine("=== Suppression d'un cuisinier ===");

            Console.Write("Entrez l'ID du cuisinier à supprimer : ");
            if (!int.TryParse(Console.ReadLine(), out int idCuisinier))
            {
                Console.WriteLine("ID invalide.");
                return;
            }

            try
            {
                // Vérifier si le cuisinier existe
                string checkQuery = "SELECT * FROM Cuisinier WHERE id_cuisinier = @id";
                MySqlCommand checkCmd = new MySqlCommand(checkQuery, connection);
                checkCmd.Parameters.AddWithValue("@id", idCuisinier);

                using (MySqlDataReader reader = checkCmd.ExecuteReader())
                {
                    if (!reader.Read())
                    {
                        Console.WriteLine("Cuisinier non trouvé.");
                        return;
                    }

                    Console.WriteLine($"Vous êtes sur le point de supprimer le cuisinier: {reader["prenom"]} {reader["nom"]}");
                }

                Console.Write("Êtes-vous sûr ? (O/N) : ");
                string confirmation = Console.ReadLine().ToUpper();

                if (confirmation != "O" && confirmation != "OUI")
                {
                    Console.WriteLine("Suppression annulée.");
                    return;
                }

                string deleteQuery = "DELETE FROM Cuisinier WHERE id_cuisinier = @id";
                MySqlCommand deleteCmd = new MySqlCommand(deleteQuery, connection);
                deleteCmd.Parameters.AddWithValue("@id", idCuisinier);

                int rowsAffected = deleteCmd.ExecuteNonQuery();
                if (rowsAffected > 0)
                {
                    Console.WriteLine("Cuisinier supprimé avec succès !");
                }
                else
                {
                    Console.WriteLine("Aucun cuisinier n'a été supprimé.");
                }
            }
            catch (MySqlException ex)
            {
                if (ex.Number == 1451) // Foreign key constraint
                {
                    Console.WriteLine("Erreur: Ce cuisinier ne peut pas être supprimé car il est lié à des commandes ou des plats.");
                }
                else
                {
                    Console.WriteLine($"Erreur MySQL: {ex.Message}");
                }
            }
 
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur: {ex.Message}");
            }
        }
        #endregion

        #region Module Commande
        private static void ModuleCommande()
        {
            Console.Clear();
            Console.WriteLine("===== MODULE COMMANDE =====");
            // Exemple de stub pour ce module.
            Console.WriteLine("Module Commande non implémenté pour le moment.");
        }
        #endregion

        #region Module Trajet
        private static void ModuleTrajet()
        {
            Console.Clear();
            Console.WriteLine("===== MODULE TRAJET =====");

            try
            {
                // Création d'un graphe simple représentant des stations de métro
                var graphe = new LivInParisApp.Graphe<string>(estOriente: false);

                // Charger les données du CSV
                string cheminFichier = "C:/Users/ruben/OneDrive/Documents/arcs projet PSI.csv"; // Remplacez par le chemin réel
                graphe.ChargerDonneesCSV(cheminFichier);

                // Sous-menu pour choisir l'action
                Console.WriteLine("Choisissez une action :");
                Console.WriteLine("1. Afficher le graphe");
                Console.WriteLine("2. Comparer les algorithmes de recherche du plus court chemin");
                Console.Write("Votre choix : ");
                string subChoice = Console.ReadLine();
                Console.WriteLine();

                switch (subChoice)
                {
                    case "1":
                        graphe.AfficherGraphe();
                        break;
                    case "2":
                        ComparerCheminsAvecInput(graphe);
                        break;
                    default:
                        Console.WriteLine("Option invalide.");
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Erreur dans le module Trajet : " + ex.Message);
            }

            Console.WriteLine("\nAppuyez sur une touche pour continuer...");
            Console.ReadKey();
        }

        private static void ComparerCheminsAvecInput(LivInParisApp.Graphe<string> graphe)
        {
            Console.Write("Entrez la station de départ (par défaut 'Porte Maillot') : ");
            string departInput = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(departInput))
                departInput = "Porte Maillot";

            Console.Write("Entrez la station d'arrivée (par défaut 'Argentine') : ");
            string arriveeInput = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(arriveeInput))
                arriveeInput = "Argentine";

            var source = graphe.Noeuds.FirstOrDefault(n => n.Nom.Equals(departInput, StringComparison.InvariantCultureIgnoreCase));
            var destination = graphe.Noeuds.FirstOrDefault(n => n.Nom.Equals(arriveeInput, StringComparison.InvariantCultureIgnoreCase));

            if (source != null && destination != null)
            {
                graphe.ComparerAlgorithmes(source, destination);
            }
            else
            {
                Console.WriteLine("Les stations de départ ou d'arrivée sont introuvables.");
            }
        }

        #endregion
    }
}
