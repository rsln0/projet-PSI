using System;
using System.Collections.Generic;
using System.IO;
using System.Globalization;

namespace LivInParisApp
{
    public class StationMetro
    {
        public int Id { get; set; }
        public string Ligne { get; set; }
        public string Nom { get; set; }
        public double Longitude { get; set; }
        public double Latitude { get; set; }
        public string Commune { get; set; }
        public string CodeInsee { get; set; }

        public StationMetro(int id, string ligne, string nom, double longitude, double latitude, string commune, string codeInsee)
        {
            Id = id;
            Ligne = ligne;
            Nom = nom;
            Longitude = longitude;
            Latitude = latitude;
            Commune = commune;
            CodeInsee = codeInsee;
        }
        
        public static double CalculerDistance(StationMetro station1, StationMetro station2)
        {
            // Conversion en radians
            double lat1 = station1.Latitude * Math.PI / 180;
            double lon1 = station1.Longitude * Math.PI / 180;
            double lat2 = station2.Latitude * Math.PI / 180;
            double lon2 = station2.Longitude * Math.PI / 180;

            // Formule de Haversine
            double dLat = lat2 - lat1;
            double dLon = lon2 - lon1;
            double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                       Math.Cos(lat1) * Math.Cos(lat2) *
                       Math.Sin(dLon / 2) * Math.Sin(dLon / 2);
            double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
            double distance = 6371000 * c; // Rayon de la Terre en mètres

            return distance;
        }
    }

    public class LecteurMetro
    {
        public Dictionary<int, StationMetro> Stations { get; private set; }
        public Graphe<StationMetro> GrapheMetro { get; private set; }

        public LecteurMetro()
        {
            Stations = new Dictionary<int, StationMetro>();
            GrapheMetro = new Graphe<StationMetro>();
        }

        public void ChargerStations(string cheminFichier)
        {
            Stations.Clear();

            using (var lecteur = new StreamReader(cheminFichier))
            {
                // Ignorer l'en-tête
                string ligne = lecteur.ReadLine();

                while ((ligne = lecteur.ReadLine()) != null)
                {
                    string[] colonnes = ligne.Split(',');
                    if (colonnes.Length >= 7)
                    {
                        int id = int.Parse(colonnes[0]);
                        string numLigne = colonnes[1];
                        string nomStation = colonnes[2];
                        double longitude = double.Parse(colonnes[3], CultureInfo.InvariantCulture);
                        double latitude = double.Parse(colonnes[4], CultureInfo.InvariantCulture);
                        string commune = colonnes[5];
                        string codeInsee = colonnes[6];

                        var station = new StationMetro(id, numLigne, nomStation, longitude, latitude, commune, codeInsee);
                        Stations[id] = station;
                    }
                }
            }
        }

        public void ConstruireGraphe(string cheminFichierConnexions)
        {
            GrapheMetro = new Graphe<StationMetro>();

            // Ajouter toutes les stations comme nœuds
            foreach (var station in Stations.Values)
            {
                GrapheMetro.AjouterNoeud(station.Id.ToString(), station);
            }

            // Ajouter les connexions
            using (var lecteur = new StreamReader(cheminFichierConnexions))
            {
                string ligne;
                while ((ligne = lecteur.ReadLine()) != null)
                {
                    string[] parties = ligne.Split(',');
                    if (parties.Length >= 3)
                    {
                        int idSource = int.Parse(parties[0]);
                        int idCible = int.Parse(parties[1]);
                        double tempsParcours = double.Parse(parties[2], CultureInfo.InvariantCulture);

                        if (Stations.ContainsKey(idSource) && Stations.ContainsKey(idCible))
                        {
                            // Ajouter un lien dirigé avec le temps de parcours comme poids
                            GrapheMetro.AjouterLienDirige(idSource.ToString(), idCible.ToString(), tempsParcours);
                        }
                    }
                }
            }
        }

        public void AjouterTempsChangementLigne()
        {
            // Créer un dictionnaire pour stocker les stations par nom
            Dictionary<string, List<StationMetro>> stationsParNom = new Dictionary<string, List<StationMetro>>();
            foreach (var station in Stations.Values)
            {
                if (!stationsParNom.ContainsKey(station.Nom))
                {
                    stationsParNom[station.Nom] = new List<StationMetro>();
                }
                stationsParNom[station.Nom].Add(station);
            }

            // Pour chaque nom de station qui a plusieurs instances (correspondances)
            foreach (var group in stationsParNom.Where(g => g.Value.Count > 1))
            {
                var stationsCorrespondance = group.Value;
                
                // Ajouter des connexions entre ces stations avec un temps de correspondance (par exemple 3 minutes)
                for (int i = 0; i < stationsCorrespondance.Count; i++)
                {
                    for (int j = i + 1; j < stationsCorrespondance.Count; j++)
                    {
                        double tempsChangement = 3.0; // 3 minutes de correspondance
                        GrapheMetro.AjouterLienDirige(stationsCorrespondance[i].Id.ToString(), 
                                                     stationsCorrespondance[j].Id.ToString(), 
                                                     tempsChangement);
                        GrapheMetro.AjouterLienDirige(stationsCorrespondance[j].Id.ToString(), 
                                                     stationsCorrespondance[i].Id.ToString(), 
                                                     tempsChangement);
                    }
                }
            }
        }

        public (double temps, List<string>) TrouverItineraire(string stationDepart, string stationArrivee, string algorithme = "dijkstra")
        {
            // Trouver les IDs des stations par leur nom
            int idDepart = -1, idArrivee = -1;
            
            foreach (var station in Stations.Values)
            {
                if (station.Nom.Equals(stationDepart, StringComparison.OrdinalIgnoreCase))
                    idDepart = station.Id;
                if (station.Nom.Equals(stationArrivee, StringComparison.OrdinalIgnoreCase))
                    idArrivee = station.Id;
            }

            if (idDepart == -1 || idArrivee == -1)
                throw new ArgumentException("Station de départ ou d'arrivée non trouvée");

            // Utiliser l'algorithme spécifié pour trouver le chemin le plus court
            var algoCheminPlusCourt = new AlgorithmesCheminPlusCourt<StationMetro>(GrapheMetro);
            var (tempsParcours, chemin) = algoCheminPlusCourt.TrouverCheminPlusCourt(idDepart.ToString(), idArrivee.ToString(), algorithme);

            // Convertir les IDs en noms de stations pour l'affichage
            List<string> itineraire = chemin.Select(id => Stations[int.Parse(id)].Nom).ToList();

            return (tempsParcours, itineraire);
        }
    }
}
