using System;
using System.Collections.Generic;
using System.Drawing;

namespace LivInParisApp
{
    public class Noeud<T>
    {
        public string Id { get; set; }
        public T Donnees { get; set; }
        public List<Lien<T>> Liens { get; set; }
        public PointF Position { get; set; }

        public Noeud(string id, T donnees)
        {
            Id = id;
            Donnees = donnees;
            Liens = new List<Lien<T>>();
        }
    }

    public class Lien<T>
    {
        public Noeud<T> Cible { get; set; }
        public double Poids { get; set; }

        public Lien(Noeud<T> cible, double poids = 1.0)
        {
            Cible = cible;
            Poids = poids;
        }
    }

    public class Graphe<T>
    {
        public Dictionary<string, Noeud<T>> Noeuds { get; private set; }

        public Graphe()
        {
            Noeuds = new Dictionary<string, Noeud<T>>();
        }

        public Noeud<T> AjouterNoeud(string id, T donnees)
        {
            if (Noeuds.ContainsKey(id))
            {
                throw new ArgumentException($"Un noeud avec l'ID {id} existe déjà");
            }

            var noeud = new Noeud<T>(id, donnees);
            Noeuds[id] = noeud;
            return noeud;
        }

        public Noeud<T> ObtenirNoeud(string id)
        {
            if (!Noeuds.ContainsKey(id))
            {
                throw new ArgumentException($"Le noeud avec l'ID {id} n'existe pas");
            }

            return Noeuds[id];
        }

        public void AjouterLienDirige(string idSource, string idCible, double poids = 1.0)
        {
            if (!Noeuds.ContainsKey(idSource) || !Noeuds.ContainsKey(idCible))
            {
                throw new ArgumentException("Le noeud source ou cible n'existe pas");
            }

            Noeuds[idSource].Liens.Add(new Lien<T>(Noeuds[idCible], poids));
        }

        public void AjouterLienNonDirige(string idSource, string idCible, double poids = 1.0)
        {
            AjouterLienDirige(idSource, idCible, poids);
            AjouterLienDirige(idCible, idSource, poids);
        }

        public bool EstConnexe()
        {
            if (Noeuds.Count == 0)
                return true;

            HashSet<string> visites = new HashSet<string>();
            Queue<Noeud<T>> aExplorer = new Queue<Noeud<T>>();

            var premierNoeud = GetEnumerableElement(Noeuds.Values, 0);
            aExplorer.Enqueue(premierNoeud);
            visites.Add(premierNoeud.Id);

            while (aExplorer.Count > 0)
            {
                var courant = aExplorer.Dequeue();

                foreach (var lien in courant.Liens)
                {
                    if (!visites.Contains(lien.Cible.Id))
                    {
                        visites.Add(lien.Cible.Id);
                        aExplorer.Enqueue(lien.Cible);
                    }
                }
            }

            return visites.Count == Noeuds.Count;
        }

        private static T GetEnumerableElement<T>(IEnumerable<T> enumerable, int index)
        {
            int i = 0;
            foreach (var item in enumerable)
            {
                if (i == index)
                    return item;
                i++;
            }
            throw new ArgumentOutOfRangeException(nameof(index));
        }

        public List<string> ParcoursLargeur(string idDepart)
        {
            List<string> resultat = new List<string>();
            if (!Noeuds.ContainsKey(idDepart))
                return resultat;

            HashSet<string> visites = new HashSet<string>();
            Queue<Noeud<T>> file = new Queue<Noeud<T>>();

            file.Enqueue(Noeuds[idDepart]);
            visites.Add(idDepart);

            while (file.Count > 0)
            {
                Noeud<T> courant = file.Dequeue();
                resultat.Add(courant.Id);

                foreach (var lien in courant.Liens)
                {
                    if (!visites.Contains(lien.Cible.Id))
                    {
                        visites.Add(lien.Cible.Id);
                        file.Enqueue(lien.Cible);
                    }
                }
            }

            return resultat;
        }

        public List<string> ParcoursProfondeur(string idDepart)
        {
            List<string> resultat = new List<string>();
            if (!Noeuds.ContainsKey(idDepart))
                return resultat;

            HashSet<string> visites = new HashSet<string>();
            Stack<Noeud<T>> pile = new Stack<Noeud<T>>();

            pile.Push(Noeuds[idDepart]);

            while (pile.Count > 0)
            {
                Noeud<T> courant = pile.Pop();
                if (!visites.Contains(courant.Id))
                {
                    visites.Add(courant.Id);
                    resultat.Add(courant.Id);

                    foreach (var lien in courant.Liens)
                    {
                        if (!visites.Contains(lien.Cible.Id))
                            pile.Push(lien.Cible);
                    }
                }
            }

            return resultat;
        }

        public bool ContientCircuit()
        {
            HashSet<string> visites = new HashSet<string>();
            HashSet<string> enExamen = new HashSet<string>();

            foreach (var noeud in Noeuds.Values)
            {
                if (!visites.Contains(noeud.Id) && DetecterCycle(noeud, visites, enExamen))
                    return true;
            }
            return false;
        }

        private bool DetecterCycle(Noeud<T> noeud, HashSet<string> visites, HashSet<string> enExamen)
        {
            visites.Add(noeud.Id);
            enExamen.Add(noeud.Id);

            foreach (var lien in noeud.Liens)
            {
                if (!visites.Contains(lien.Cible.Id))
                {
                    if (DetecterCycle(lien.Cible, visites, enExamen))
                        return true;
                }
                else if (enExamen.Contains(lien.Cible.Id))
                {
                    return true;
                }
            }

            enExamen.Remove(noeud.Id);
            return false;
        }
    }
}
